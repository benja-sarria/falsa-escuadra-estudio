// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Roles {
  id   Int      @id @default(autoincrement())
  name String
  users User[]
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  roleId Int
  role  Roles  @relation(fields: [roleId], references: [id]) 
  profile Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
  photo String
  founder Boolean? @default(false)
  signature String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   
  content   String
  published Boolean  @default(false)
  updatedBy    User     @relation(fields: [updatedById], references: [id])
  updatedById  Int
  photos ProductPhotos[]
  productType ProductTypes @relation(fields: [productTypeId], references: [id])
  productTypeId Int
  productSlug String @default("hola")
  coordinates String @default("00000,00000")
}

model ProductTraits {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String  
  description String 
  coordinates String
  photoId Int
  photo ProductPhotos @relation(fields: [photoId], references: [id])
}


model ProductPhotos {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  src String?
  alt String
  traits ProductTraits[]
  productId Int
  product Product @relation(fields: [productId], references: [id])
  isPortrait Boolean @default(false)
}

model ProductTypes {
  id        Int      @id @default(autoincrement())
  type String
  products Product[]
}
